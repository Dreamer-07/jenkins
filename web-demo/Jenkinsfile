pipeline {
    agent any

    stages {
        stage('pull code') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[credentialsId: 'd2344a4e-e819-41d4-bda4-1f8bffdd0ef9', url: 'http://192.168.137.80:88/root/web-demo.git']]])
            }
        }
        stage('maven build') {
            steps {
                sh 'mvn clean package'
            }
        }
        // 构建后进行代码检查
        stage('sonar code check') {
            steps {
                script {
                    // 引入 Sonar scanner 工具
                    scannerHome = tool 'sonar-scanner.4.3'
                }
                // 引入 Sonar Server
                withSonarQubeEnv('sonar-server-7.4') {
                    sh "${scannerHome}/bin/sonar-scanner"
                }
            }
        }
        stage('project deploy') {
            steps {
                deploy adapters: [tomcat8(credentialsId: 'a7922d1b-95a7-4f5f-a8e5-d05368679ff5', path: '', url: 'http://192.168.137.82:8080/')], contextPath: null, war: 'target/*.war'
            }
        }
    }
    // 在构建完成后进行相关操作
    post {
        // 无论是否构建成功都进行相关操作
        always {
            emailext(
                subject: '构建通知：${PROJECT_NAME} - Build # ${BUILD_NUMBER} - ${BUILD_STATUS}!',
                body: '${FILE,path="email.html"}',
                to: '2391105059@qq.com'
            )
        }
    }
}